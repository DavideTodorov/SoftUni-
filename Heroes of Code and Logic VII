package com.company;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {

    static class Hero {
        int hp;
        int mp;

        public Hero(int hp, int mp) {
            this.hp = hp;
            this.mp = mp;
        }

        public void setHp(int hp) {
            this.hp = hp;
        }

        public void setMp(int mp) {
            this.mp = mp;
        }

        public int getHp() {
            return hp;
        }

        public int getMp() {
            return mp;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = Integer.parseInt(scanner.nextLine());

        Map<String, Hero> heroes = new TreeMap<>();
        for (int i = 0; i < n; i++) {
            String[] tokens = scanner.nextLine().split("\\s+");
            Hero hero = new Hero(Integer.parseInt(tokens[1]), Integer.parseInt(tokens[2]));
            heroes.put(tokens[0], hero);
        }

        String input = scanner.nextLine();
        while (!"End".equals(input)) {
            String[] tokens = input.split(" - ");
            String command = tokens[0];
            String heroName = tokens[1];

            switch (command) {
                case "CastSpell":
                    int neededMP = Integer.parseInt(tokens[2]);
                    int heroMP = heroes.get(heroName).getMp();
                    String cast = tokens[3];

                    if (heroMP >= neededMP) {
                        heroMP -= neededMP;
                        System.out.println(String.format("%s has successfully cast %s and now has %d MP!", heroName, cast, heroMP));
                        heroes.get(heroName).setMp(heroMP);
                    } else {
                        System.out.println(String.format("%s does not have enough MP to cast %s!", heroName, cast));
                    }
                    break;

                case "TakeDamage":
                    int damage = Integer.parseInt(tokens[2]);
                    String attacker = tokens[3];
                    int heroHP = heroes.get(heroName).getHp();
                    heroHP -= damage;
                    if (heroHP > 0) {
                        System.out.println(String.format("%s was hit for %d HP by %s and now has %d HP left!",
                                heroName, damage, attacker, heroHP));
                        heroes.get(heroName).setHp(heroHP);
                    } else {
                        System.out.println(String.format("%s has been killed by %s!", heroName, attacker));
                        heroes.remove(heroName);
                    }
                    break;

                case "Recharge":
                    int amount = Integer.parseInt(tokens[2]);
                    heroMP = heroes.get(heroName).getMp();

                    if (heroMP + amount > 200) {
                        int recharged = 200 - heroMP;
                        heroMP = 200;
                        System.out.println(String.format("%s recharged for %d MP!", heroName, recharged));
                        heroes.get(heroName).setMp(heroMP);
                    } else {
                        heroMP += amount;
                        System.out.println(String.format("%s recharged for %d MP!", heroName, amount));
                        heroes.get(heroName).setMp(heroMP);
                    }
                    break;

                case "Heal":
                    amount = Integer.parseInt(tokens[2]);
                    heroHP = heroes.get(heroName).getHp();

                    if (heroHP + amount > 100) {
                        int healed = 100 - heroHP;
                        heroHP = 100;
                        System.out.println(String.format("%s healed for %d HP!", heroName, healed));
                        heroes.get(heroName).setHp(heroHP);
                    } else {
                        heroHP += amount;
                        System.out.println(String.format("%s healed for %d HP!", heroName, amount));
                        heroes.get(heroName).setHp(heroHP);
                    }
                    break;
            }
            input = scanner.nextLine();
        }

        heroes.entrySet()
                .stream()
                .sorted((h1, h2) -> Integer.compare(h2.getValue().getHp(), h1.getValue().getHp()))
                .forEach(h -> System.out.printf("%s%n  HP: %d%n  MP: %d%n",
                        h.getKey(), h.getValue().getHp(), h.getValue().getMp()));
    }
}
